#lang typed/racket

(provide reverse-complement
         hamming-distance
         min-hamming-distance
         sum-min-hamming-distance
         dna-to-index
         sum-hamming-distance
         index-to-dna
         format-dna
         format-dnas
         sub-dna-at)


(require "../util/type.rkt"
         "../util/database.rkt"
         math/base)

(require/typed racket/function
               [(curryr curryr2) (All (a b c) (-> (-> a b c) b (-> a c))) ])

(define (dna-atom-to-index [atom : DnaAtom])
  (case atom
    [(A) 0]
    [(C) 1]
    [(G) 2]
    [(T) 3]))

(define (index-to-dna-atom [index : Integer])
  (case index
    [(0) 'A]
    [(1) 'C]
    [(2) 'G]
    [(3) 'T]
    [else (error "Not a correct index")]))

(: dna-to-index (->* (Dna) (Integer Integer) Integer))
(define (dna-to-index dna [pos 0] [length (vector-length dna)])
  (define (dna-to-index-iter [offset : Integer]) : Integer
    (if (< offset pos)
        0
        (+ (dna-atom-to-index (vector-ref dna offset)) (* 4 (dna-to-index-iter (- offset 1))))))
  (dna-to-index-iter (+ pos (- length 1))))

(: index-to-dna (-> Integer Integer Dna))
(define (index-to-dna index length)
  (let ([vect ((inst make-vector DnaAtom) length 'A)])
    (define (index-to-dna-iter [pos : Integer] [left : Integer]) : Dna
      (if (>= pos length)
          vect
          (begin
            (vector-set! vect (- length pos 1) (index-to-dna-atom (modulo left 4)))
            (index-to-dna-iter (+ 1 pos) (quotient left 4)))))
    (index-to-dna-iter 0 index)))

(: reverse-complement (-> Dna Dna))
(define (reverse-complement dna)
  (list->vector
   (map (lambda ([atom : DnaAtom]) (case atom [(A) 'T] [(T) 'A] [(C) 'G] [(G) 'C]))
        (reverse (vector->list dna)))))

(: hamming-distance (-> Dna Dna Integer))
(define (hamming-distance dna1 dna2)
  (vector-count (lambda (a b) (not (eq? a b))) dna1 dna2))

(: sum-hamming-distance (-> (Listof Dna) Dna Integer))
(define (sum-hamming-distance dnas pattern)
  ((cast sum (-> (Listof Integer) Integer)) (map (curry hamming-distance pattern) dnas)))

(: hamming-jump (-> Dna (Vectorof Integer)))
(define (hamming-jump pattern)
  (let iter ([out (make-vector (vector-length pattern) 0)]
             [pos 0]
             [hamming 0])
    (vector-set! out pos hamming)
    (if (>=  (+ 1 pos) (vector-length pattern))
      out
      (if (eq? (vector-ref pattern pos) (vector-ref pattern (+ 1 pos)))
          (iter out (+ 1 pos) hamming)
          (iter out (+ 1 pos) (+ 1 hamming))))))
(: min-hamming-distance (-> Dna Dna Integer))
(define (min-hamming-distance dna pattern)
  (let ([pattern-length (vector-length pattern)]
        [dna-length (vector-length dna)])
    (let iter ([offset-dna 0]
               [offset-pattern 0]
               [current-distance 0]
               [current-min-distance pattern-length])
      ;(printf "off-dna ~a, off-pat ~a, current ~a, min ~a~n" offset-dna offset-pattern current-distance current-min-distance)
      (cond
        [(> (+ offset-dna pattern-length) dna-length) current-min-distance]
        [(>= current-distance current-min-distance) (iter (+ offset-dna 1) 0 0 current-min-distance)]
        [(eq?  (vector-ref pattern offset-pattern) (vector-ref dna (+ offset-dna offset-pattern)))
         (if (= offset-pattern (- pattern-length 1))
             (iter (+ offset-dna 1) 0 0 (min current-min-distance current-distance))
             (iter offset-dna (+ 1 offset-pattern) current-distance current-min-distance))]
        [(= offset-pattern (- pattern-length 1)) (iter  (+ offset-dna 1) 0 0 (min (+ 1 current-distance) current-min-distance))]
        [else (iter offset-dna (+ offset-pattern 1) (+ 1 current-distance) current-min-distance)]))))

(: sum-min-hamming-distance (-> (Listof Dna) Dna Integer))
(define (sum-min-hamming-distance list pattern)
  ((cast sum (-> (Listof Integer) Integer)) (map (curryr2 min-hamming-distance pattern) list)))

(define (format-dna [dna : Dna]) : Any
  (vector-map write dna))

(define (format-dnas [motifs : (Listof Dna)]) : Any
  (for-each (lambda ([dna : Dna]) (format-dna dna) (printf "~n")) motifs))

(define (sub-dna-at [dna : Dna] [pos : Integer] [length : Integer]) : Dna
  (vector-copy dna pos (+ length pos)))


;(format-dna (reverse-complement (string->dna  "TATCATGAATCGTTTGTACGGGAGGTAAGTATAGAACGCACTCGGACACACTTGCCTGTAGCCGGTGATACAGCGAGTTGGGCAGTGAAATGGTTATATGATGAAAATTTGGGGCGCGGTTAGCTTATCGAATTGACGTTGGATCTTTTATAAGGATGTTCACCGTGGATTCGAGCAAAGATGTGTGAACGGATTATACCGAGCTTAGTATCCATATTGGGTGGCAGAAAAGCGCGGCGATAACCTTCATAATTGTGCCACACAATAGGCAACCTGGCCGTGGTGCCTGGCGCTTTACCACTCACTAATTGCTATTCAAATACCGGTATACTACGACAATTGTTTCTGCTCCCTGGCAAGGTATTGACCAGAGCCCGGTAACGGTGAACCCTGGGACAAGACCCGTTTAACTCCACACATCCGGAGTGCTTGTCAGTTTGCGGTCGTGTGTCCTTAGTTGTATGTCCCGTTTAGTAAGTTTCATGACTTTGATACGGAAAGGGCTACAGCGTGCCCTGACCTAGTGGTCGCGTCATATCATGTATGATCCATGACATTGGTGAAGGTCGACTAGACTATGGTGTTACAAACTTATAGCAGCGGTTTAAAGACATTAGCACTATAATACACTAATCAGGGCCTAACGGAACGATGATTGGACACGGTACTGGTGTTCTTAAGAGACGATGTAGGCGGTAATCCCGAGGTGGCAACGTTCCTCGAGTAGGGGACCTCTTTGGCTCCCCCATTTTGTTAGACTGTCTGCTCTCCTTGTCGGCGGCGGAGCTAGAGCTATGTTCGAAACTAGACAACTAATCAGGTCTAGTCAATTACTCATTGCTAACGAGACATTGCAGGTTATCACAATAGAAATGAAGCAGGAAGTTCGCGGGGTCTGGAAATTACAGCTAGTCCAAGCCCTCGAGCAGAATGAGTTCGCTGCTCTGCGACTCCTAAGTTAGGATTACGGCGTATTCTGTATCCTCCCAGTTCTATGGGGTGTCATACGGTTCGGGTAACCGAGCGTCTGCGCCCAACTGGTAACAAAGGAAGAGTAATATACAACACCGGACCGACCAGCTACGTATAATAAGAAATGGTTATAGATGTCATGCTCGGGAGTTAACGCACCTGTCTCCTTTGTCTTGCCGTTCATGGTTGAGCTGGCAGTATCCAGCAAACTCTCCGACAGGGGAGAGGTCGGGCCCCTAGTAGGAGCAGTCCCCAAACTTTTTCGGCAAGGGGTCATAAGATAGCGCCATCTCGCATCTCGATGTGTCGCTATCGCATTTGCTGCCCAGATAACAGGTTACCGGGTTGAGGATCATTTGCCCATCAGAATCTGCGAGAGCGACAGATAATTCGTTTACGTAGTCGCTATTTCATCGACGATGGCTTGCTCGTAAGGATCCCTTATACTCTAAGTCTAAGGCTGAATCACTGGCTTCGTGAGACCGGAGTGCAGTCCGCTGTTCTGAAGGTGTAATTAGTCCAAAACCCTACTTACGCTGGAGCTCACGAAGTGACAAGTAGTTAACATGGACAATAACGTCACCTGACGGATTTCGGCGGTAAGTATTACCGTCCGTACTCATCTACCGGCCCGCTGGTTATAGGGCGGCCAGCCCCACCGGCTCCGAACGATCTCGACTGACCAGCGACAAAAAACCTCCTATGCGCGGTACCTGAGCATGCTATCGCTAGGAGACCGGCGTCTCCTCTACGTCCACAGACACCCAAGTGAATTAGGTGGAGAATGGCGAACCGCATACCAAGGAGGCGCAGGTTTCATAGGTTTTTACTCACCAAGTGTTAAAACTTATATACGTCTTCCAGGTCGAAGGCAGGATGGTTTATAAATTCGGAGTTACGGCTGGTTGGAGTGTCCAGTATTCTAGCTGACCTGAGATGTGTTCCTCAGTAACACTTAAGGGACAGGGGTACAGCACTAATTCCCTAGAACCAGCGGTTGCCCCTAAGCCTTCTGTGTTGCTGTAACTCTGGAGCTTTTGGCAGCCGCCGAAGTTGGATTGTATGCCTGGGCCTGGGAATATGTTGTCCCAGCAACACGCATAGTCGAGTGCATCTGGAGGTCATCTTCGATTCTAGTTTGTAATAATGCCCCTGACACTTGCCGTAAGACTCCAGGAAATGAATAGTTCGCCGGGAAGAAGAATTAGTTGAAGGGGCAGGTTGCAACCGGCCTCACTCTATGATGAGGTCTACCGGTACGCGGTGAGCTGTCGCAGTTCGTCGTCAGTTATTCGAACATAAGCGGCCTAATCTGTATGTCACTCGTCAAAAAGTAGCGGTTGTAGTATCTGATCCCTCTGCAGTGATCGGGGCGTCCTCCACCCCATTACCCGCCTAAGGTGATTCACGCAACTGTACGCCGTTGCCTGGTCTTTCTATAGCAAGCCACCGAACTAATTTCTGTTGGCATCATCTTTCACCCCCGTTACACGTCTCGTGGTAATCTGGGGGGCTCACATCAGTTGCGCACAACAGGCAGACATCTCAAGGGGATAAGTCTTCAAACCGCTTGCCTAATTTACACGTAGACTAATGACTCCTGGAATTACGTGCATGAGTCTGCCTCAAGTTACCTCATGCTTGTTCATGGTAGGATCTAACCACACCTCGGCTATATAAGCCACTTCCCCTATGGCAGATAGAACGGCCTTAGGTAGGGGAAGAATCATCGACTAGGTTCGATTGTTCTATGGTATCTGCGCACATGTGCTGGTCCAATATGTCAGTCATCCTCACAATTTCCTTGTGTAGTATACAAGATTATCGCCAACTCCTTGTATCAGCCACCCTCCACAACTTTAATGCCCCGGTCTCTAAGTTTGATGAATCGACATCAAAGACTCGAAGGATTTGCCCTGAACGCGTACTCTCATGTGTCCCCTGGCAGACAGAGCCATACTCTGTTGTAAACTCAGTTGATCCGTTTGCTCTTTAATGCGATATGAATCTCTTTCCGCCGATACCACTGTCCTGCTGGCGTCGCCAAAACTAATTTCCCGAACACATGGTGTCTAGCGGGGTCACGTGCGAATGAACCTAATAGGCTCCCCGCAACTAGTCGTGATGTGTCGGCGACATTGATGATCCATATCGGCCTATACATTCCCGTCCACGTGGTGCTTAAATATGGACGATTGCTCTGGGCGAAATTACCGAATCGCCGAATGTTCTCGCTCGCGCGGCAAACAGTCCACAGAAAGCTCGGAGAATGCGCCGCCGCGCACGGTTGTTATTATTAGCCACTGCTGATCTATCAGGCGCGGCCAGAGTCCCTGCGTGTAGGGGCTGAAGCTCCTATCAAAACCTGGTTACTCGTATACAGCCGACTGATTGGTGTACGTTGATCATAGTCTCACGAAACGTATTGCTGCTATATGCTAAACGTTGGGCCCCACACCAAGTACCGCCCCAAGCACTACGCGCCAACGCGTACCACCGCAAGACAGGTAACAAAAATCGGTTCGTAATCGCCATGACACTTAGGAATCACGAACAATGCATTGGAAACTTCCTCCGCCTATAAGTCCCCTCGGACCGTGATGGCGGTTGGAACAAGGAACGTTAATTCTCGTTGAAATAGAGCGTGGAGGCTGTGATTTAGCGCTGGACCGATGAGTAGCCTCGATTACCCCATATGTCGCAATGGTGACACAAACTCTGGATATTCTGGACGGTACACAGTGGACTGCATGCCCCATAACGATTTGGTAGGCCGGCTCGTTTTCGGGCTTTCGTTGGCTATGAATCCTAAAGCCTGACGTGGCATCCATCCAAATAATGCCGTACCAAGAAAAGTAAATCAAAATGGGGGAACGCGACTATAAGAACAGGTAAGTCGTGCGTCGATCCTCCTGGGCATTCCCCTGAGGGTCCCTTTTGTTTGTCACTGAAGTGGGGGAGAAAGACGGGCTCGCCCAAAGTACAATAATCTCATTGAGCGATGTCAGGCCGCACTGGAACCCGATTCACCGCGTGCACCGTTCGTCCTCGCGATTATACCACCTTCGTGAAAGTGAAACCACAATGCGTGATCCGGGCAGCCATCCAGGCATGGCTATATTCCCGAGAGTCCTAAGTATGATCGTACGATGAGCCACTAGCGCACACGAGTCTGGGTATGGATCAGGCGCCATCGGTTAGCGCGTGCGTGCACCGTCATCGAGCGACACCATGAATGAGCCCGGAGAACCTTTGACGGACAGTCAGTAATGAACTGACTGTCATCTACGCTCAACTCTGAACCCCCTTTTAAAAAGAGTACTGTCATAAGTATTAACAGGCCCTCACAGATAAGCCAGACTATTTGGTCCAACTTGAGTTAATATGCGGTGCTGTGCATTCCAAAGTCGTGAAACTGACTGGTATTAAAGTCGCTAACAGCCTATGGAAATCAATAGCATATCGAACCGCCGTGACAGTGGGTCCCGTGTTCTTCGAAGAAAGGGTGCGGCTGGAACATTCGCAACCAGTTTAGAGGACACTGCAAGCTGCTGACTGAATACACCGTGAAGCTGAGGTCTTACACTTAGCCCAGGAGGGCCACTTCTACGGGAGTGACACCATTGGGCTCTTACAATCTTTTTTTAGGGCTAGTGGAGCAGTGTGGAGTATGATAAAACGCTGATAGGACACCCCAGTTTCCCACAGTTATGCTAATGCACGTGGTTCCCTTCTATATGTTCATATTCGCACCAGGTAGTTAAGGGTGTCAGACCGGACGGTTTGAAATAATCAAGTAATCGTTAGGGATGTTCTACAACGCTGCTATACTCGTTTTTCAACTGGGCCTCAAATGATAGCGACGCAGGGCCCATCTGGCCTTGACCATAACCTCTAGGCATGAGACCGATGGACTACGTATTTCATTTCTGATATCGGTCTGGCTAGCAAAAGTAACAGAGTGTCACCCAGTCCCCCTATTATTTTTCTTACCTTTTCATAATCCCGTTTTCTTGAAGGTGAGGCCCCTACCGGTTCATTGTGGCGTCACAGGTGACCCTCATAACCCACGACCGTGGATGGAGGCCGTGCGCGCCACGTCACGCGCTCTCGTTACAGCGAAGACAGTTCTGGATAGGAAGACTAAACTACTTACGACAGACGATTAGAGCCAACGGCCGTCATACAGCGACCTTCAAATTGAAGTTACATCTCACCCTCGCCCTATGGTCTTGCCGACCGAATTAAAAGTTGCGTTAGAGGTGGTAATGGACTGTACTGGTACGCTAGAACTGTCTCGAGCCGGAAGGACGCAAACAATAACCTACACCGTAGAGCTCGGCAGAACTGGTCTAGCTTCAGTTGTGCACACTTCATCCAGACGTGATGCGCTCTTTGCAGCCAACTATGTAATACCCACGCTAACAGTGTCTTCCTTCTAGCACGTGCAGTCGTGCTCCGCCAACGGCTTAAGTCGAGTAGATACTGATCATGCTAAGATAAGAGGTCTCGCTCAGTTCACCGAGCAAGCAACAAGGAATATTGGCTGAGACTGACTGCGACAGTGGCCTCAGCATAGCACCTGTCAATCCTGTTTTCATAATACTCGTGCCTAAACAGACGGTCGCAGTCCATAAAAGCGGCTCGCTGGAACTGCCGGCCGCCTAATACTCCCGTCCAAAGACAGTGGCAGAATCTTAGCTGGGACGTGAATTCCGGAAGGGTATGCCCCCCTACCATACGGATTTGTATTGGTTAGTAAACTAAGGTTGAATGATAAGCAAGGATCATACAGTCTCATCAAGGCTGCCAGGGTCCCCCGTGGGCGGTGGGCCGTGTAAAACGCTGAATACGAATGTTTTCTAACAGGCGCCCATACTCCCTACTACGTTCCAAAGATAGTAAGTAATCGATCACGAACCGGGACAACGGGAGCTAGAGGAAGTATTGTATAAGATACGCTCACTATTACAATTTTTGACTTGTCACATGTTGCGCGTCAGGCAGGCAACGAGTTCTCACTGGGTCTCATGGATGGCAGTTGCATGGGGGCGATTTTGGATTTCGTACGTCTTTATTAAGGTGACACTCCTGGATCTACGTGGTAATACTTCGTCCCGCGTCGGTTGGCAGCGCAGGGTAAGGAAGCGATCGTTTAAGTCGACCATTCCGGGTCAAATTGTTAAATTGGAACTTCCTCGAGAGATGACAAAATTTCCCGGGCACTCAGTCATGTGAATCTCTCATAGCACTGATGATAGTAGTGGACCGGACTGGCCCGAAGTCATTAGGGTCTTACTATATTGGGGTCTTGGATAGCAAAATCAGCTCTTGTACTCTCCACTAATGACTATAATTGGGCTTTTGATGATTTTCAGCCCACCAACCAAATCTTTCCTACATCTGCCGGTATCAATGAATTATCTAAGACCCGGAACGACATTACTTCTTGGGGTTTCCTGACAATTACCCCAAGGCTCTTTGCTGTTGAAGTTGAAGAGCGTCAGATAGGGGGCTTCCAGTCCTTGATACAAGTCTTCCATCGGGGACGCGCCTCGCTAGACACTTAATATAGTGCTCACTTCTGGCGGCCTGTGCTGCGGGTCCAACAAAATGCGAATAGCCGGGCTACGCCCCAGGATACAAACGCCCCTTGATCGGCAAACCATACCTTATAAAAGCTACGCTGAAAGTCATTTTTCTTTGCATCAACCTTTCATACATGTGACAGTATTGGAACCGGTTCAAGAACCGCGACATCCCTCGAGTGCGGCGAGCAGCCTAAGGGAATGATGTTTAAGTTATCGTACGTGCTGCCTTTTGGCCATGGTTCACGCCTCAGTAGCAATTCTACGCACCGAACTAGAGGACTGAGCCCGCGCAAACAGATATCCGAGTCCTCTTTGGGGAGGCATAGACTCCTTCGGCTAATGTTGGGCAAGGACCGCTCCAACTATCTTGCCGAGTGTTGTCCACATTGATAACTGCGGCCAACCGTGCGAATGTGAACTATGGGAGAACTGTTCGACGAACACTCGCCTCGAGTTGTTTGAATATTAGAAGAATACTAGGTAGGGCGCTTCCTTTGAAACCCTAAGATGCCCCTCTCACTGTGGCGAATTCCATCGTGCGGACATATCATGATGCACAGCTAAGGACGATTTCCGGTGAAAGTTCCGACAGACAACACCTAGCCCTATCTTGCATAGTGCCGACATCGATAAGTATACTCAGCGTATCTTTCTTTAATACCAACCTGGCGGCCCCGAGGCCGTCACTTAGGGACAGTCGTATACATACCTACCAACGCTGGAGGCAGGCTGAGTGAATCCGTATAACATTTTTATTATCACTGTAGAATCATGCAAGTACTCGTCGGAAATCAAGTTTACTATTTCATTCGCCAATGATATGCGTTGTGCGATATCCCTGGTCTGTTCATGAAGCGTCCGGGGAGTGGAGTTCTGCGCATCCAATTTCTTCTCGGGATGCATCGTGCGAACACAGTGAGCGCCGTTCTGTTAAGACTGAGGATCTCCTCCCATGTTTCTCTGTTTCGTTCTCAACGACATCACGAGGTGTTCGATTCTTGTTCCTGGAGAGTGCGACGTGGGGTACCGTTCTCGCTTACAGTCGTCCGATCCCGTTTAGTCCCGCCGTTATTTGGGCCTTGACTTAAAGCAAAGCGAGTAGCTGTGTACGCTGTATCGGCGGATTCTATTATCTCGCTCAGTTATCGGCTGGTCATAACCCGTTTGATTCGGTGCGCGACGTAGATATCCCGCGCGGCATCGAGACTCATAATAACGGTCGATTAGGTGGTACCTATAATATGGTCGATATTCATCCCCGCTGTCAAGCAGTATTATGAGATAGAAGATTATCGGAGGTCTTAGCTTCTAGGTCTCTAGTCGATACTCAGGACGAATTCTCCTCAATGGTCTATTGCTTTTCAAATACCTCCTGAAACCCGAGTCCAATAAGCAAATGCCCACAATAGCGCTCCCCCATGATTCACCCCGAGATGCCAATGCGATCGTGACGCAAAATCGTCCCTTAGCGCGAAGTGCAATCGTCGGGATGGCGACGCCTGGTACATATTGAGGTTTGTGACGGCATGCAGA" )))

#|

(: min-hamming-distance (-> Dna Dna Integer))
(define (min-hamming-distance dna pattern)
  (let ([pattern-length (vector-length pattern)]
        [dna-length (vector-length dna)]
        [jump (hamming-jump pattern)])
    (let iter ([offset-dna 0]
               [offset-pattern 0]
               [missmatch 0]
               [current-distance 0]
               [current-min-distance pattern-length])
      (printf "off-dna ~a, off-pat ~a, missmatch ~a, current ~a, min ~a~n" offset-dna offset-pattern missmatch current-distance current-min-distance)
      (cond
        [(> (+ offset-dna pattern-length) dna-length) current-min-distance]
        [(>= current-distance current-min-distance) (iter (+ offset-dna 1) missmatch  0 (vector-ref jump missmatch) current-min-distance)]
        [(eq?  (vector-ref pattern offset-pattern) (vector-ref dna (+ offset-dna offset-pattern)))
         (if (= offset-pattern (- pattern-length 1))
             (iter (+ offset-dna 1) missmatch 0 (vector-ref jump missmatch) current-min-distance)
             (iter offset-dna (+ 1 offset-pattern) missmatch current-distance current-min-distance))]
        [(= offset-pattern (- pattern-length 1)) (iter  (+ offset-dna 1) missmatch 0 (vector-ref jump missmatch) (min current-min-distance current-distance))]
        [(= 0 missmatch) (iter offset-dna (+ offset-pattern 1) offset-pattern (+ 1 current-distance) current-min-distance)]
        [else (iter offset-dna (+ offset-pattern 1) missmatch (+ 1 current-distance) current-min-distance)]))))
|#
;; Adjust next mismatch

;;(min-hamming-distance #(G C A A A G A C G C T G A C C A A) #(G A T T C T C A))
